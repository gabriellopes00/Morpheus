version: '3.9'

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_ERLANG_COOKIE: 83da6479156341769d743dc1f9c7ba98
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - '15672:15672'
      - '5672:5672'
    networks:
      - morpheus

  accounts:
    container_name: accounts
    restart: always
    depends_on:
      - redis
      - rabbitmq
    build: ./accounts/
    networks:
      - morpheus
    ports:
      - '7765:7765'

  events:
    container_name: events
    restart: always
    depends_on:
      - rabbitmq
    build: ./events/
    networks:
      - morpheus
    ports:
      - '4422:4422'

  mailer:
    container_name: mailer
    restart: always
    depends_on:
      #- postgresql
      - redis
      - rabbitmq
    build: ./mailer/
    networks:
      - morpheus

  redis:
    image: redis:6.2-alpine
    container_name: redis
    command: redis-server
    ports:
      - 6379:6379
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - morpheus
  # ----------------- KONG GATEWAY --------------
  kong-migrations:
    image: kong:2.6.0-alpine
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - morpheus
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: kong:2.6.0-alpine
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - morpheus
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: kong:2.6.0-alpine
    user: 'kong'
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong
    networks:
      - morpheus
    ports:
      - '8000:8000/tcp'
      - '127.0.0.1:8001:8001/tcp'
      - '8443:8443/tcp'
      - '127.0.0.1:8444:8444/tcp'
    healthcheck:
      test: ['CMD', 'kong', 'health']
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'kong']
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - morpheus
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga:latest
    command: '-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga_db'
    networks:
      - morpheus
    restart: on-failure
    depends_on:
      - db

  konga:
    container_name: konga
    image: pantsel/konga:latest
    restart: always
    networks:
      - morpheus
    environment:
      DB_ADAPTER: postgres
      DB_HOST: db
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - db
    ports:
      - '1337:1337'

volumes:
  kong_data:

networks:
  morpheus:
    driver: bridge
