version: '3.9'

services:
  accounts:
    container_name: accounts
    restart: always
    depends_on:
      - redis
      - rabbitmq
      - keycloack
    build: ./accounts/
    networks:
      - morpheus
    ports:
      - '3792:3792'

  # events:
  #   container_name: events
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #   build: ./events/
  #   networks:
  #     - morpheus
  #   ports:
  #     - '4422:4422'

  # mailer:
  #   container_name: mailer
  #   restart: always
  #   depends_on:
  #     - redis
  #     - rabbitmq
  #   build: ./mailer/
  #   networks:
  #     - morpheus

  keycloack:
    container_name: keycloack
    image: quay.io/keycloak/keycloak:legacy
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloack_db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      #JDBC_PARAMS: "ssl=true"
    ports:
      - 8080:8080
    depends_on:
      - keycloack_db
    networks:
      - morpheus

  keycloack_db:
    container_name: keycloack_db
    image: postgres:13.6-alpine
    volumes:
      - keycloack_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - morpheus

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_ERLANG_COOKIE: 83da6479156341769d743dc1f9c7ba98
      RABBITMQ_DEFAULT_USER: morpheus
      RABBITMQ_DEFAULT_PASS: morpheus
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - '15672:15672'
      - '5672:5672'
    networks:
      - morpheus

  redis:
    image: redis:6.2-alpine
    container_name: redis
    command: redis-server
    ports:
      - 6379:6379
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - morpheus

volumes:
  kong_data:
  elastic:
  kibana:
  logstash:
  keycloack_db_data:
    driver: local


networks:
  morpheus:
    driver: bridge

  # kong-migrations:
  #   image: kong:2.6.0-alpine
  #   command: kong migrations bootstrap
  #   restart: on-failure
  #   depends_on:
  #     - kong_db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: kong_db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   mem_limit: "512m"
  #   memswap_limit: "512m"
  #   cpus: 0.5
  #   logging:
  #     options:
  #       max-size: "50m"
  #   networks:
  #     - morpheus

  # kong-migrations-up:
  #   image: kong:2.6.0-alpine
  #   command: kong migrations up && kong migrations finish
  #   restart: on-failure
  #   mem_limit: "512m"
  #   memswap_limit: "512m"
  #   cpus: 0.5
  #   logging:
  #     options:
  #       max-size: "50m"
  #   depends_on:
  #     - kong_db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: kong_db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   networks:
  #     - morpheus

  # kong:
  #   image: kong:2.6.0-alpine
  #   restart: always
  #   user: 'kong'
  #   mem_limit: "2g"
  #   memswap_limit: "2g"
  #   cpus: 4
  #   logging:
  #     options:
  #       max-size: "50m"
  #   depends_on:
  #     - kong_db
  #   environment:
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: '0.0.0.0:8001'
  #     KONG_CASSANDRA_CONTACT_POINTS: kong_db
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: kong_db
  #     KONG_PG_USER: kong
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_PG_PASSWORD: kong
  #   networks:
  #     - morpheus
  #   ports:
  #     - '8000:8000/tcp'
  #     - '127.0.0.1:8001:8001/tcp'
  #     - '8443:8443/tcp'
  #     - '127.0.0.1:8444:8444/tcp'
  #   healthcheck:
  #     test: ['CMD', 'kong', 'health']
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10

  # kong_db:
  #   container_name: kong_db
  #   image: postgres:9.5
  #   mem_limit: "6g"
  #   memswap_limit: "6g"
  #   cpus: 4
  #   logging:
  #     options:
  #       max-size: "50m"
  #   environment:
  #     POSTGRES_DB: kong
  #     POSTGRES_USER: kong
  #     POSTGRES_PASSWORD: kong
  #   healthcheck:
  #     test: ['CMD', 'pg_isready', '-U', 'kong']
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3
  #   restart: always
  #   stdin_open: true
  #   tty: true
  #   networks:
  #     - morpheus
  #   volumes:
  #     - kong_data:/var/lib/postgresql/data

  # konga-prepare:
  #   container_name: konga-prepare
  #   image: pantsel/konga:latest
  #   command: '-c prepare -a postgres -u postgresql://kong:kong@kong_db:5432/konga_db'
  #   mem_limit: "512m"
  #   memswap_limit: "512m"
  #   cpus: 0.5
  #   logging:
  #     options:
  #       max-size: "50m"
  #   networks:
  #     - morpheus
  #   restart: on-failure
  #   depends_on:
  #     - kong_db

  # konga:
  #   container_name: konga
  #   image: pantsel/konga:latest
  #   restart: always
  #   mem_limit: "1g"
  #   memswap_limit: "1g"
  #   cpus: 1
  #   logging:
  #     options:
  #       max-size: "50m"
  #   networks:
  #     - morpheus
  #   environment:
  #     DB_ADAPTER: postgres
  #     DB_HOST: kong_db
  #     DB_USER: kong
  #     DB_PASSWORD: kong
  #     TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
  #     DB_DATABASE: konga_db
  #     NODE_ENV: production
  #   depends_on:
  #     - kong_db
  #   ports:
  #     - '1337:1337'

  # elasticsearch:
  #   container_name: elasticsearch
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
  #   environment:
  #     - node.name=elasticsearch
  #     - cluster.name=es-docker-cluster
  #     - cluster.initial_master_nodes=elasticsearch
  #     - bootstrap.memory_lock=true
  #     - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
  #     - 'ELASTIC_PASSWORD=kong'
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - elastic:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #   networks:
  #     - morpheus

  # kibana:
  #   container_name: kibana
  #   image: docker.elastic.co/kibana/kibana:7.14.1
  #   depends_on:
  #     - elasticsearch
  #   volumes:
  #     - kibana:/usr/share/kibana/config
  #   ports:
  #     - 5601:5601
  #   networks:
  #     - morpheus
  #   environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  #     ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'

  # logstash:
  #   container_name: logstash
  #   image: docker.elastic.co/logstash/logstash:7.14.1
  #   depends_on:
  #     - elasticsearch
  #   volumes:
  #     - logstash:/usr/share/logstash
  #     - .kong/logstash/pipeline:/usr/share/logstash/pipeline
  #   ports:
  #     - 5000:5000
  #     - 9600:9600
  #   networks:
  #     - morpheus
  #   environment:
  #     ES_JAVA_OPTS: '-Xmx256m -Xms256m'
