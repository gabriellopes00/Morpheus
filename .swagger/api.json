{
  "openapi": "3.0.0",

  "info": {
    "version": "1.0.0",
    "title": "Morpheus Eventos",
    "description": "A ticketing platform for all kinds of events.",
    "termsOfService": "http://mrpheus.herokuapp.com/terms-of-service",
    "contact": {
      "name": "API Support",
      "url": "http://mrpheus.herokuapp.com/support",
      "email": "support@mrpheus.com"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://github.com/gabriellopes00/Morpheus/blob/main/LICENSE"
    }
  },

  "servers": [
    {
      "url": "http://localhost",
      "description": "Development server running on localhost"
    },
    {
      "url": "https://mrpheus.herokuapp.com",
      "description": "Production server hosted at heroku"
    }
  ],

  "tags": [
    {
      "name": "Account",
      "description": "Refers to users' accounts in the platform."
    },
    {
      "name": "Events",
      "description": "Refers to events that will be handled in the platform."
    }
  ],

  "paths": {
    "/accounts": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create Account Route",
        "description": "This route allows the cliente to create a new account in the API. It returns the created account data and also authenticate the one.",
        "requestBody": {
          "required": true,
          "description": "Accounts' creation route must receive accounts' credentials to register them in the API.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account successfully created and authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccountResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Invalid parameters",
                  "code": "400",
                  "error": "Bad Request"
                }
              }
            }
          },
          "409": {
            "description": "Invalid Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Email already in use",
                  "code": "409",
                  "error": "Conflicted Request"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "tags": ["Accounts"],
        "description": "This routes fetches the account data by a given id, passed in the request path parameter.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account returned successfully ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "description": "Account Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Account unauthorized",
                  "code": "401",
                  "error": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Account access forbidden",
                  "code": "403",
                  "error": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Account not found",
                  "code": "404",
                  "error": "NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Get the profile of the token's owner",
        "operationId": "getUserProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/jwtToken"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "User not found",
                  "code": "404",
                  "error": "Not Found"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/avatar/upload": {
      "get": {
        "description": "Get the list of forecast ordered by the most ranked",
        "operationId": "getForecast",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/orderBy"
            }
          },
          {
            "name": "orderField",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/orderField"
            }
          },
          {
            "name": "x-access-token",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/jwtToken"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The list of forecast has been returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeForecast"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/auth": {
      "get": {
        "description": "Get the list of forecast ordered by the most ranked",
        "parameters": [
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/orderBy"
            }
          },
          {
            "name": "orderField",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/orderField"
            }
          },
          {
            "name": "x-access-token",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/jwtToken"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The list of forecast has been returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeForecast"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/auth/refresh": {
      "get": {
        "description": "Get the list of forecast ordered by the most ranked",
        "parameters": [
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/orderBy"
            }
          },
          {
            "name": "orderField",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/orderField"
            }
          },
          {
            "name": "x-access-token",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/jwtToken"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The list of forecast has been returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeForecast"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "CreateAccountParams": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "John Doe", "maxLength": 255, "minLength": 4 },
          "email": {
            "type": "string",
            "format": "email",
            "example": "johndoe@gmail.com",
            "maxLength": 256
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "_secret_userpass1234",
            "maxLength": 255,
            "minLength": 4
          },
          "avatar_url": {
            "type": "string",
            "format": "url",
            "example": "https://johndoe-img.png"
          },
          "phone_number": {
            "type": "string",
            "example": "(11) 98988-1893",
            "pattern": "^\\(\\d{2,}\\) \\d{5,}\\-\\d{4}$"
          },
          "document": {
            "type": "string",
            "example": "467.391.245-80",
            "pattern": "^([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})$"
          },
          "gender": {
            "type": "string",
            "example": "male",
            "enum": ["male", "female", "unspecified"]
          },
          "birth_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-04-30T14:12:31.797Z"
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "avatar_url",
          "phone_number",
          "document",
          "gender",
          "birth_date"
        ]
      },
      "CreateAccountResult": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "access_token": {
            "$ref": "#/components/schemas/jwt_token"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/jwt_token"
          }
        },
        "required": ["account", "access_token", "refresh_token"]
      },

      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": { "type": "string", "example": "John Doe", "maxLength": 255, "minLength": 4 },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "_secret_userpass1234",
            "maxLength": 255,
            "minLength": 4
          },
          "avatar_url": {
            "type": "string",
            "format": "url",
            "example": "https://johndoe-img.png"
          },
          "phone_number": {
            "type": "string",
            "example": "(11) 98988-1893",
            "pattern": "^\\(\\d{2,}\\) \\d{5,}\\-\\d{4}$"
          },
          "document": {
            "type": "string",
            "example": "467.391.245-80",
            "pattern": "^([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})$"
          },
          "gender": {
            "type": "string",
            "example": "male",
            "enum": ["male", "female", "unspecified"]
          },
          "birth_date": {
            "type": "string",
            "format": "date-time",
            "example": "2005-04-30T14:12:31.797Z"
          },
          "created_at": {
            "$ref": "#/components/schemas/created_at"
          },
          "updated_at": {
            "$ref": "#/components/schemas/updated_at"
          }
        }
      },

      "jwt_token": {
        "type": "string",
        "format": "jwt",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0ZTRlN2ZkNC1kMzE4LTQyZTctYjdjMC1mZWQ3ZmQ0OWE5ZjUifQ.eyJleHAiOjE2NDk3ODk3MTcsImlhdCI6MTY0OTc4NzkxNywianRpIjoiNmUyZjI3YjYtODgwMC00NGRkLWExODEtZTgwYmMwODYyZGIwIiwiaXNzIjoiaHR0cDovL2tleWNsb2Fjazo4MDgwL2F1dGgvcmVhbG1zL21vcnBoZXVzIiwiYXVkIjoiaHR0cDovL2tleWNsb2Fjazo4MDgwL2F1dGgvcmVhbG1zL21vcnBoZXVzIiwic3ViIjoiZjIxODIwMWUtMTNjMi00YjFmLTlkOGYtYTFhZTg4ODRhNjQwIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImFjY291bnRzX3NlcnZpY2UiLCJzZXNzaW9uX3N0YXRlIjoiZWNiNWUzNDktOTllOS00ZGIwLTg2YmEtZWU4YjZhYTMyOTg5Iiwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiZWNiNWUzNDktOTllOS00ZGIwLTg2YmEtZWU4YjZhYTMyOTg5In0.BhzmWUP7kY_azB01VDL8ygPBWcrlya2lAHBtIABLA8Y"
      },
      "uuid": {
        "type": "string",
        "format": "uuid",
        "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
      },
      "email": {
        "type": "string",
        "format": "email",
        "example": "johndoe@gmail.com",
        "maxLength": 256
      },
      "created_at": {
        "type": "string",
        "format": "date-time",
        "example": "2022-04-30T14:12:31.797Z"
      },
      "updated_at": {
        "type": "string",
        "format": "date-time",
        "example": "2022-04-30T14:12:31.797Z"
      },

      "UserAuth": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "password": {
            "$ref": "#/components/schemas/password"
          }
        }
      },

      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "number"
          },
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          }
        }
      }
    }
  }
}
